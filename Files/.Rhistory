# -pop_density is not true (# of people)/area, but (# of Bush/Gore voters)/area.
elections_county <-
"https://raw.githubusercontent.com/rudeboybert/MATH218/gh-pages/assets/kMeans/elections_2000.csv" %>%
read_csv() %>%
mutate(pop_density = n/area_sqmi)
View(elections_county)
counties_map <- USAboundaries::us_counties("2000-11-01")
states_map <- USAboundaries::us_states("2000-11-01")
plot(counties_map, axes=TRUE)
plot(states_map, axes=TRUE)
# Let's plot in ggplot. broom::tidy() to the rescue!
counties_map_tidy <- counties_map %>%
# set id variable to be FIPS codes
tidy(region="fips") %>%
tbl_df() %>%
# Remove Alaska/Hawaii, who have FIPS codes 02 & 15
filter(!str_sub(id, 1, 2) %in% c("02", "15"))
states_map_tidy <- states_map %>%
tidy(region="abbr_name") %>%
tbl_df() %>%
# Remove Alaska/Hawaii
filter(!id %in% c("AK", "HI"))
ggplot(NULL, aes(x=long, y=lat)) +
# The group aesthetic ensures points in the same polygon are kept together:
geom_polygon(data=counties_map_tidy, aes(group=group), fill="white") +
# Trace outlines of counties then states:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
# Use correct aspect ratio for maps:
coord_map()
# Plot 2000 Electoral Map -----------------------------------------------------------
# Overall the lower 48 George W. Bush got 49.7% of vote
overall_bush_prop <- sum(elections_county$bush)/sum(elections_county$n)
elections_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
# Fill in county polygons color-coded by %'age margin for push over 49.7%
geom_polygon(data=elections_map, aes(group=group, fill=100*(prop_bush-overall_bush_prop))) +
scale_fill_gradient2(name="% Margin", low="blue", high="red", mid="white") +
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
labs(title="% Margin of Bush Victory Above/Below 49.7%")
# kMeans ------------------------------------------------------------------
# Prepare input data
input_data <- elections_county %>%
select(lat_centroid, long_centroid)
# Fit kMeans Clustering
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
# Redo the above code but selecting
# -Different combinations of n, lat_centroid, long_centroid, pop_density,
# prop_bush, etc inside input_data
# -Different numbers of clusters k
library(tidyverse)
library(USAboundaries)
library(sp)
library(stringr)
library(broom)
# Load Counties Data -----------------------------------------------------------
# Data consists of observations for 3109 counties in 2000 election
# -(longitude, latitude) of county's centroid i.e. middle point
# -area_sqmi: surface area of county in square miles
# -bush/gore: number of votes for George W. Bush/Al Gore. Other candidates dropped for simplicity.
# -n=bush+gore. NOT the # of votes, but # for Bush + # for Gore
# -pop_density is not true (# of people)/area, but (# of Bush/Gore voters)/area.
elections_county <-
"https://raw.githubusercontent.com/rudeboybert/MATH218/gh-pages/assets/kMeans/elections_2000.csv" %>%
read_csv() %>%
mutate(pop_density = n/area_sqmi)
View(elections_county)
counties_map <- USAboundaries::us_counties("2000-11-01")
states_map <- USAboundaries::us_states("2000-11-01")
plot(counties_map, axes=TRUE)
plot(states_map, axes=TRUE)
# Let's plot in ggplot. broom::tidy() to the rescue!
counties_map_tidy <- counties_map %>%
# set id variable to be FIPS codes
tidy(region="fips") %>%
tbl_df() %>%
# Remove Alaska/Hawaii, who have FIPS codes 02 & 15
filter(!str_sub(id, 1, 2) %in% c("02", "15"))
states_map_tidy <- states_map %>%
tidy(region="abbr_name") %>%
tbl_df() %>%
# Remove Alaska/Hawaii
filter(!id %in% c("AK", "HI"))
ggplot(NULL, aes(x=long, y=lat)) +
# The group aesthetic ensures points in the same polygon are kept together:
geom_polygon(data=counties_map_tidy, aes(group=group), fill="white") +
# Trace outlines of counties then states:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
# Use correct aspect ratio for maps:
coord_map()
# Plot 2000 Electoral Map -----------------------------------------------------------
# Overall the lower 48 George W. Bush got 49.7% of vote
overall_bush_prop <- sum(elections_county$bush)/sum(elections_county$n)
elections_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
# Fill in county polygons color-coded by %'age margin for push over 49.7%
geom_polygon(data=elections_map, aes(group=group, fill=100*(prop_bush-overall_bush_prop))) +
scale_fill_gradient2(name="% Margin", low="blue", high="red", mid="white") +
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
labs(title="% Margin of Bush Victory Above/Below 49.7%")
# kMeans ------------------------------------------------------------------
# Prepare input data
input_data <- elections_county %>%
select(lat_centroid, long_centroid)
# Fit kMeans Clustering
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
# Redo the above code but selecting
# -Different combinations of n, lat_centroid, long_centroid, pop_density,
# prop_bush, etc inside input_data
# -Different numbers of clusters k
install.packages("maptools")
install.packages("geotools")
install.packages("rgeos")
library(tidyverse)
library(USAboundaries)
library(sp)
library(stringr)
library(broom)
library(maptools)
library(rgeos)
# Load Counties Data -----------------------------------------------------------
# Data consists of observations for 3109 counties in 2000 election
# -(longitude, latitude) of county's centroid i.e. middle point
# -area_sqmi: surface area of county in square miles
# -bush/gore: number of votes for George W. Bush/Al Gore. Other candidates dropped for simplicity.
# -n=bush+gore. NOT the # of votes, but # for Bush + # for Gore
# -pop_density is not true (# of people)/area, but (# of Bush/Gore voters)/area.
elections_county <-
"https://raw.githubusercontent.com/rudeboybert/MATH218/gh-pages/assets/kMeans/elections_2000.csv" %>%
read_csv() %>%
mutate(pop_density = n/area_sqmi)
View(elections_county)
counties_map <- USAboundaries::us_counties("2000-11-01")
states_map <- USAboundaries::us_states("2000-11-01")
plot(counties_map, axes=TRUE)
plot(states_map, axes=TRUE)
# Let's plot in ggplot. broom::tidy() to the rescue!
counties_map_tidy <- counties_map %>%
# set id variable to be FIPS codes
tidy(region="fips") %>%
tbl_df() %>%
# Remove Alaska/Hawaii, who have FIPS codes 02 & 15
filter(!str_sub(id, 1, 2) %in% c("02", "15"))
states_map_tidy <- states_map %>%
tidy(region="abbr_name") %>%
tbl_df() %>%
# Remove Alaska/Hawaii
filter(!id %in% c("AK", "HI"))
ggplot(NULL, aes(x=long, y=lat)) +
# The group aesthetic ensures points in the same polygon are kept together:
geom_polygon(data=counties_map_tidy, aes(group=group), fill="white") +
# Trace outlines of counties then states:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
# Use correct aspect ratio for maps:
coord_map()
# Plot 2000 Electoral Map -----------------------------------------------------------
# Overall the lower 48 George W. Bush got 49.7% of vote
overall_bush_prop <- sum(elections_county$bush)/sum(elections_county$n)
elections_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
# Fill in county polygons color-coded by %'age margin for push over 49.7%
geom_polygon(data=elections_map, aes(group=group, fill=100*(prop_bush-overall_bush_prop))) +
scale_fill_gradient2(name="% Margin", low="blue", high="red", mid="white") +
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
labs(title="% Margin of Bush Victory Above/Below 49.7%")
# kMeans ------------------------------------------------------------------
# Prepare input data
input_data <- elections_county %>%
select(lat_centroid, long_centroid)
# Fit kMeans Clustering
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
# Redo the above code but selecting
# -Different combinations of n, lat_centroid, long_centroid, pop_density,
# prop_bush, etc inside input_data
# -Different numbers of clusters k
library(tidyverse)
library(USAboundaries)
library(sp)
library(stringr)
library(broom)
library(maptools)
library(rgeos)
# Load Counties Data -----------------------------------------------------------
# Data consists of observations for 3109 counties in 2000 election
# -(longitude, latitude) of county's centroid i.e. middle point
# -area_sqmi: surface area of county in square miles
# -bush/gore: number of votes for George W. Bush/Al Gore. Other candidates dropped for simplicity.
# -n=bush+gore. NOT the # of votes, but # for Bush + # for Gore
# -pop_density is not true (# of people)/area, but (# of Bush/Gore voters)/area.
elections_county <-
"https://raw.githubusercontent.com/rudeboybert/MATH218/gh-pages/assets/kMeans/elections_2000.csv" %>%
read_csv() %>%
mutate(pop_density = n/area_sqmi)
View(elections_county)
counties_map <- USAboundaries::us_counties("2000-11-01")
states_map <- USAboundaries::us_states("2000-11-01")
plot(counties_map, axes=TRUE)
plot(states_map, axes=TRUE)
# Let's plot in ggplot. broom::tidy() to the rescue!
counties_map_tidy <- counties_map %>%
# set id variable to be FIPS codes
tidy(region="fips") %>%
tbl_df() %>%
# Remove Alaska/Hawaii, who have FIPS codes 02 & 15
filter(!str_sub(id, 1, 2) %in% c("02", "15"))
states_map_tidy <- states_map %>%
tidy(region="abbr_name") %>%
tbl_df() %>%
# Remove Alaska/Hawaii
filter(!id %in% c("AK", "HI"))
ggplot(NULL, aes(x=long, y=lat)) +
# The group aesthetic ensures points in the same polygon are kept together:
geom_polygon(data=counties_map_tidy, aes(group=group), fill="white") +
# Trace outlines of counties then states:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
# Use correct aspect ratio for maps:
coord_map()
# Plot 2000 Electoral Map -----------------------------------------------------------
# Overall the lower 48 George W. Bush got 49.7% of vote
overall_bush_prop <- sum(elections_county$bush)/sum(elections_county$n)
elections_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
# Fill in county polygons color-coded by %'age margin for push over 49.7%
geom_polygon(data=elections_map, aes(group=group, fill=100*(prop_bush-overall_bush_prop))) +
scale_fill_gradient2(name="% Margin", low="blue", high="red", mid="white") +
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
labs(title="% Margin of Bush Victory Above/Below 49.7%")
# kMeans ------------------------------------------------------------------
# Prepare input data
input_data <- elections_county %>%
select(lat_centroid, long_centroid)
# Fit kMeans Clustering
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
# Redo the above code but selecting
# -Different combinations of n, lat_centroid, long_centroid, pop_density,
# prop_bush, etc inside input_data
# -Different numbers of clusters k
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
install.packages("mapproj")
library(mapproj)
# kMeans ------------------------------------------------------------------
# Prepare input data
input_data <- elections_county %>%
select(lat_centroid, long_centroid)
# Fit kMeans Clustering
k <- 2
results <- kmeans(input_data, k, nstart = 20)
# Look at results
results$cluster %>% table()
centers <- results$centers %>%
tbl_df()
centers
# Add cluster results to main data:
elections_county <- elections_county %>%
mutate(cluster = as.factor(results$cluster))
# Join with map data and plot
cluster_map <- counties_map_tidy %>%
inner_join(elections_county, by=c("id"="fips"))
ggplot(NULL, aes(x=long, y=lat)) +
geom_polygon(data=cluster_map, aes(group=group, fill=cluster)) +
# Trace outlines:
geom_path(data=counties_map_tidy, aes(group=group), col="black", size=0.05) +
geom_path(data=states_map_tidy, aes(group=group), col="black", size=0.3) +
coord_map() +
# This will only work if you included long_centroid and lat_centroid as X's:
geom_point(data=centers, aes(x=long_centroid, y=lat_centroid), size=3)
# Redo the abo
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
train <- read_csv("Files/train.csv")
test <- read_csv("Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
train <- read_csv("Files/train.csv")
test <- read_csv("Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#-------------------------------------------------------------------------------
# Spring 2017 MATH 218 Statistical Learning Final Project
# Due Tuesday 2017/5/23 12:00pm
#
# Team Members: Aayam Poudel and David Valentin
# Kaggle Competition Name: Rossman Store Sales
# Kaggle Competition URL: https://www.kaggle.com/c/rossmann-store-sales
#-------------------------------------------------------------------------------
# 1. Load All Necessary Packages ------------------------------------------
library(tidyverse)
library(broom)
library(lubridate)
#sexy themes
#install.packages('ggthemes')
library(ggthemes)
library(glmnet)
install.packages('bisoreg')
library(bisoreg)
# 2. Load Data Files & Data Cleaning --------------------------------------
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
train <- read_csv("Files/train.csv")
test <- read_csv("Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#-------------------------------------------------------------------------------
# Spring 2017 MATH 218 Statistical Learning Final Project
# Due Tuesday 2017/5/23 12:00pm
#
# Team Members: Aayam Poudel and David Valentin
# Kaggle Competition Name: Rossman Store Sales
# Kaggle Competition URL: https://www.kaggle.com/c/rossmann-store-sales
#-------------------------------------------------------------------------------
# 1. Load All Necessary Packages ------------------------------------------
library(tidyverse)
library(broom)
library(lubridate)
#sexy themes
#install.packages('ggthemes')
library(ggthemes)
library(glmnet)
install.packages('bisoreg')
library(bisoreg)
# 2. Load Data Files & Data Cleaning --------------------------------------
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
train <- read_csv("./Files/train.csv")
test <- read_csv("./Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("./Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#Since the dataset is too big, I couldn't do proper conputations so I am going to select a subset
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
test <- test %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
install.packages("bisoreg")
#-------------------------------------------------------------------------------
# Spring 2017 MATH 218 Statistical Learning Final Project
# Due Tuesday 2017/5/23 12:00pm
#
# Team Members: Aayam Poudel and David Valentin
# Kaggle Competition Name: Rossman Store Sales
# Kaggle Competition URL: https://www.kaggle.com/c/rossmann-store-sales
#-------------------------------------------------------------------------------
# 1. Load All Necessary Packages ------------------------------------------
library(tidyverse)
library(broom)
library(lubridate)
#sexy themes
#install.packages('ggthemes')
library(ggthemes)
library(glmnet)
install.packages('bisoreg')
library(bisoreg)
# 2. Load Data Files & Data Cleaning --------------------------------------
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
train <- read_csv("./Files/train.csv")
test <- read_csv("./Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("./Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#Since the dataset is too big, I couldn't do proper conputations so I am going to select a subset
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
test <- test %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
train <- read_csv("./Files/train.csv")
train <- read_csv("/Files/train.csv")
setwd("/Team_F")
setwd("./Team_F")
setwd("./TeamF/Files")
train <- read_csv("/Files/train.csv")
train <- read_csv("train.csv")
setwd("./TeamF")
setwd("./TeamF")
setwd("/TeamF")
