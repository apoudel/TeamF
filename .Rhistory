#Since the dataset is too big, I couldn't do proper conputations so I am going to select a subset
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
test <- test %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
library(tidyverse)
library(broom)
library(lubridate)
#sexy themes
#install.packages('ggthemes')
library(ggthemes)
library(glmnet)
install.packages('bisoreg')
library(bisoreg)
setwd("/TeamF")
train <- read_csv("/Files/train.csv")
train <- read_csv("./Files/train.csv")
test <- read_csv("./Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
store <- read_csv("./Files/store.csv")
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
#Since the dataset is too big, I couldn't do proper conputations so I am going to select a subset
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
test <- test %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
View(train)
View(test)
type(train$StoreType)
str(train$StoreType)
unique(train$StoreType)
#Changing the storetype variables to ints
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreType = ifelse(StoreType, "a", 1,
ifelse(StoreType, "b", 2,
ifelse(StoreType, "c", 3,
ifelse(StoreType, "d", 4, 0)))))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreTypeNew = ifelse(StoreType, "a", 1,
ifelse(StoreType, "b", 2,
ifelse(StoreType, "c", 3,
ifelse(StoreType, "d", 4, 0)))))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreTypeNew = ifelse(StoreType, "a", 1, ifelse(StoreType, "b", 2, ifelse(StoreType, "c", 3, ifelse(StoreType, "d", 4, 0)))))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreTypeNew = ifelse(StoreType, 'a', 1, ifelse(StoreType, 'b', 2, ifelse(StoreType, 'c', 3, ifelse('d', 4, 0)))))
#Changing the storetype variables to ints
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreTypeNew = ifelse(StoreType, 'a', 1, 0))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreType = ifelse(StoreType, 'a', 1, 0))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(StoreType2 = ifelse(StoreType, 'a', 1, 0))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(train, StoreType2 = ifelse(StoreType, 'a', 1, 0))
train <- train %>%
select(-Date, -Customers, -PromoInterval, -Promo2SinceWeek) %>%
mutate(train, StoreType2 = ifelse(StoreType, 'a', 1, ifelse(StoreType, 'b', 2, ifelse(StoreType, 'c', 3, ifelse('d', 4, 0)))))
train <- train %>%
mutate(StoreType2 = ifelse(StoreType, 'a', 1, ifelse(StoreType, 'b', 2, ifelse(StoreType, 'c', 3, ifelse('d', 4, 0)))))
#Changing the storetype variables to ints
train <- train %>%
mutate(StoreType2 = ifelse(StoreType, 'a', 1, ifelse('b', 2, ifelse('c', 3, ifelse('d', 4, 0)))))
train <- train %>%
mutate(StoreType2 = ifelse(StoreType == 'a', 1, ifelse(StoreType == 'b', 2, ifelse(StoreType == 'c', 3, ifelse(StoreType == 'd', 4, 0)))))
train <- read_csv("./Files/train.csv")
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
train <- left_join(train,store, by="Store")
modified_train <- train %>%
select(-Date, -Customers, -Promo2SinceWeek, -PromoInterval)
mutate(StoreType2 = ifelse(StoreType == 'a', 1, ifelse(StoreType == 'b', 2, ifelse(StoreType == 'c', 3, ifelse(StoreType == 'd', 4, 0)))))
View(modified_train)
modified_train <- train %>%
select(-Date, -Customers, -Promo2SinceWeek, -PromoInterval) %>%
mutate(StoreType2 = ifelse(StoreType == 'a', 1, ifelse(StoreType == 'b', 2, ifelse(StoreType == 'c', 3, ifelse(StoreType == 'd', 4, 0)))))
View(modified_train)
train <- read_csv("./Files/train.csv")
train <- left_join(train,store, by="Store")
#Since the dataset is too big, we couldn't do proper conputations so we decided to make a subset of it
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
modified_train <- train %>%
select(-Date, -Customers, -Promo2SinceWeek, -PromoInterval) %>%
mutate(StoreType = ifelse(StoreType == 'a', 1, ifelse(StoreType == 'b', 2, ifelse(StoreType == 'c', 3, ifelse(StoreType == 'd', 4, 0)))))
modified_train <- train %>%
select(-Date, -Customers, -Promo2SinceWeek, -PromoInterval) %>%
mutate(StoreType = ifelse(StoreType == 'a', 1, ifelse(StoreType == 'b', 2, ifelse(StoreType == 'c', 3, ifelse(StoreType == 'd', 4, 0))))) %>%
mutate(Assortment = ifelse(Assortment == 'a', 1, ifelse(Assortment == 'b', 2, ifelse(Assortment == 'c', 3, ifelse(Assortment == 'd', 4, 0)))))
View(store)
View(modified_train)
View(modified_train)
new_modified <- train %>%
select(-Date, -Customers, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
group_by(StoreType) %>%
mutate(sum_by_storetype = mean(Sales)) %>%
mutate(sum_by_storetype = mean(Customers)) %>%
mutate(sum_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
group_by(StoreType) %>%
mutate(sum_by_storetype = mean(Sales)) %>%
mutate(sum_by_storetype = mean(Customers)) %>%
mutate(sum_by_storetype = mean(CompetitionDistance))
View(new_modified)
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
group_by(StoreType) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
#Create some variables:
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summary(avg_sales_by_storetype = mean(Sales)) %>%
summary(avg_customers_by_storetype = mean(Customers)) %>%
summary(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
summary(avg_sales_by_storetype = mean(Sales)) %>%
summary(avg_customers_by_storetype = mean(Customers)) %>%
summary(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(total_sales = sum(Sales)) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
train <- read_csv("./Files/train.csv")
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
train <- left_join(train,store, by="Store")
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
View(train)
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
View(train)
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(train$Customers)) %>%
summarise(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(train$Sales)) %>%
summarise(avg_customers_by_storetype = mean(train$Customers)) %>%
summarise(avg_distance_by_storetype = mean(train$CompetitionDistance))
View(new_modified)
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
summarise(avg_sales_by_storetype = mean(train$Sales)) %>%
summarise(avg_customers_by_storetype = mean(train$Customers))
#Create some variables:
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
summarise(avg_sales_by_storetype = mean(train$Sales)) %>%
summarise(avg_customers_by_storetype = mean(train$Customers))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers))
new_modified <- train %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers))
train <- read_csv("./Files/train.csv")
train <- left_join(train,store, by="Store")
#Since the dataset is too big, we couldn't do proper conputations so we decided to make a subset of it
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
new_modified <- train %>%
summarise(avg_sales_by_storetype = mean(Sales)) %>%
summarise(avg_customers_by_storetype = mean(Customers))
#Create some variables:
new_modified <- train %>%
summarise(train, avg_sales_by_storetype = mean(Sales)) %>%
summarise(train, avg_customers_by_storetype = mean(Customers))
View(new_modified)
new_modified <- train %>%
group_by(store) %>%
summarise(train, avg_sales_by_storetype = mean(Sales)) %>%
summarise(train, avg_customers_by_storetype = mean(Customers))
new_modified <- train %>%
group_by(Store) %>%
summarise(train, avg_sales_by_storetype = mean(Sales)) %>%
summarise(train, avg_customers_by_storetype = mean(Customers))
new_modified <- train %>%
group_by(Store) %>%
mutate(train, avg_sales_by_storetype = mean(Sales)) %>%
mutate(train, avg_customers_by_storetype = mean(Customers))
#Create some variables:
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(train$Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
group_by(StoreType) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(train$Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
#Create some variables:
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
group_by(StoreType) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(train$Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(train$Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(train$Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Customers/Sales, 3))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Customers/Sales, 5))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
filter(Closed == 0) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
filter(Open == 0) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5))
new_modified <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
filter(Open == 1) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5))
modified_train <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5)) %>%
mutate(is.na(Sales_Per_Customer), 0, Sales_Per_Customer)
#-------------------------------------------------------------------------------
# Spring 2017 MATH 218 Statistical Learning Final Project
# Due Tuesday 2017/5/23 12:00pm
#
# Team Members: Aayam Poudel and David Valentin
# Kaggle Competition Name: Rossman Store Sales
# Kaggle Competition URL: https://www.kaggle.com/c/rossmann-store-sales
#-------------------------------------------------------------------------------
# 1. Load All Necessary Packages ------------------------------------------
library(tidyverse)
library(broom)
library(lubridate)
#sexy themes
#install.packages('ggthemes')
library(ggthemes)
library(glmnet)
install.packages('bisoreg')
library(bisoreg)
# 1. Load Data Files & Data Cleaning --------------------------------------
#The working directory. Make sure to modify it when you run your code
setwd("~/Desktop/Junior Spring/Statistical Learning/Homework/Final/Team_F")
#David's working directory
setwd("/TeamF")
train <- read_csv("./Files/train.csv")
test <- read_csv("./Files/test.csv")
sample_submissions <- read_csv("Files/sample_submission.csv")
#supplemetal information about the stores:
store <- read_csv("./Files/store.csv")
#since the store info is relevant to both train and test datasets let's join them to the datasets
train <- left_join(train,store, by="Store")
test <- left_join(test,store,by="Store")
# 2. Cleaning The Data ---------------------------------
#Since the dataset is too big, we couldn't do proper conputations so we decided to make a subset of it
train <- train %>%
sample_frac(0.1) %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
test <- test %>%
mutate(Year=year(Date), Month=month(Date), DayOfMonth=day(Date))
#Create some new variables!
modified_train <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5)) %>%
mutate(is.na(Sales_Per_Customer), 0, Sales_Per_Customer)
install.packages("bisoreg")
View(modified_train)
#Create some new variables!
modified_train <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5)) %>%
mutate(Sales_Per_Customer = ifelse(is.na(Sales_Per_Customer), 0, Sales_Per_Customer))
store_by_promotions <- ggplot(modified_train, aes(x=Promo2, y=Sales, group=Promo2, fill="green")) +
geom_dotplot() +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
store_by_promotions <- ggplot(modified_train, aes(x=Promo2, y=Sales, group=Promo2, fill="green")) +
geom_boxplot() +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
store_by_promotions <- ggplot(modified_train, aes(x=modified_train$total_num_promotions, y=Sales, group=Promo2, fill="green")) +
geom_boxplot() +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
store_by_promotions <- ggplot(modified_train, aes(x=modified_train$total_num_promotions, y=Sales, group=Promo2, fill="green")) +
geom_bar(stat="identity") +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
modified_train <- modified_train %>% filter(total_num_promotions == 0)
modified_train <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5)) %>%
mutate(Sales_Per_Customer = ifelse(is.na(Sales_Per_Customer), 0, Sales_Per_Customer))
new_modified_train <- modified_train %>% filter(total_num_promotions == 0)
store_by_promotions <- ggplot(new_modified_train, aes(x=modified_train$total_num_promotions, y=Sales, group=Promo2, fill="green")) +
geom_bar(stat="identity") +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
store_by_promotions <- ggplot(new_modified_train, aes(x=total_num_promotions, y=Sales, group=Promo2, fill="green")) +
geom_bar(stat="identity") +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
store_by_promotions <- ggplot(new_modified_train, aes(x=total_num_promotions, y=Sales, group=total_num_promotions, fill="green")) +
geom_bar(stat="identity") +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
View(modified_train)
store_by_promotions <- ggplot(new_modified_train, aes(x=total_num_promotions, y=avg_sales_by_storetype, fill="green")) +
geom_bar(stat="identity") +
ylab("Sales") +
xlab("Promo2") + theme_economist()
store_by_promotions
View(new_modified_train)
new_modified_train <- modified_train %>% filter(total_num_promotions == 0)
modified_train <- train %>%
select(-Date, -Promo2SinceWeek, -PromoInterval, -Promo2SinceYear, -CompetitionOpenSinceMonth, -CompetitionOpenSinceYear) %>%
mutate(StateHoliday = ifelse(is.na(StateHoliday), 0, StateHoliday)) %>%
group_by(Store) %>%
mutate(avg_sales_by_storetype = mean(Sales)) %>%
mutate(avg_customers_by_storetype = mean(Customers)) %>%
mutate(avg_distance_by_storetype = mean(CompetitionDistance)) %>%
mutate(total_num_promotions = sum(Promo2)) %>%
mutate(Sales_Per_Customer = signif(Sales/Customers, 5)) %>%
mutate(Sales_Per_Customer = ifelse(is.na(Sales_Per_Customer), 0, Sales_Per_Customer))
modified_train
store_by_promotions <- ggplot(modified_train, aes(x=total_num_promotions, y=avg_sales_by_storetype, fill="green")) +
geom_hist(stat="identity") +
ylab("Average Sales") +
xlab("Total Num Sales") + theme_economist()
store_by_promotions <- ggplot(modified_train, aes(x=total_num_promotions, y=avg_sales_by_storetype, fill="green")) +
geom_histogram(stat="identity") +
ylab("Average Sales") +
xlab("Total Num Sales") + theme_economist()
store_by_promotions
